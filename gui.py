import sys
import input
import stub
from PyQt5.QtCore import QDateTime, Qt
from PyQt5.QtWidgets import (
        QApplication,
        QDateTimeEdit,
        QHBoxLayout,
        QInputDialog,
        QLabel,
        QRadioButton,
        QTableWidget,
        QPushButton,
        QTableWidgetItem,
        QWidget,
        QCheckBox,
        QLineEdit,
        QStackedLayout,
        QVBoxLayout,
        QMessageBox
    )

class Window(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Booking Automation")
        self.setGeometry(400, 100, 600, 480)
        
        self.stackLayout = QStackedLayout()
        self.setLayout(self.stackLayout)
        self.ordNow = ''
        
        self.home_page()
        self.login_page()
        self.create_page()
        self.details_page()
        self.order_page()
        self.dash_page()

    def home_page(self):
        self.homePage = QWidget()
        homePageLayout = QHBoxLayout()
        logbtn = QPushButton("Login")
        crbtn = QPushButton("Create new account")
        logbtn.setFixedSize(150, 75)
        crbtn.setFixedSize(150, 75)
        homePageLayout.addWidget(logbtn)
        homePageLayout.addWidget(crbtn)
        logbtn.clicked.connect(lambda : self.switchPage(1))
        crbtn.clicked.connect(lambda : self.switchPage(2))
        self.homePage.setLayout(homePageLayout)
        self.stackLayout.addWidget(self.homePage)

    def login_page(self):
        self.loginPage = QWidget()
        loginPageLayout = QVBoxLayout()
        title = QLabel("Login Page")
        title.setFixedSize(200, 60)
        title.setAlignment(Qt.AlignCenter)
        loginPageLayout.addWidget(title)
        loginPageLayout.setSpacing(20)
        form = QVBoxLayout()
        form.setAlignment(Qt.AlignCenter)
        usrForm = QHBoxLayout()
        labUsr = QLabel("Username:")
        logUsr = QLineEdit()
        usrForm.addWidget(labUsr)
        usrForm.addWidget(logUsr)
        labUsr.setFixedSize(100, 30)
        logUsr.setFixedSize(200, 30)
        pasForm = QHBoxLayout()
        labPas = QLabel("Password:")
        logPas = QLineEdit()
        logPas.setEchoMode(QLineEdit.Password)
        pasForm.addWidget(labPas)
        pasForm.addWidget(logPas)
        labPas.setFixedSize(100, 30)
        logPas.setFixedSize(200, 30)
        form.addLayout(usrForm)
        form.addLayout(pasForm)
        btns = QHBoxLayout()
        btns.addStretch(1)
        bckBtn = QPushButton("Back")
        logBtn = QPushButton("Login")
        btns.addWidget(bckBtn)
        btns.addWidget(logBtn)
        loginPageLayout.addLayout(form)
        loginPageLayout.addLayout(btns)
        logBtn.setFixedSize(100, 50)
        bckBtn.setFixedSize(100, 50)
        logBtn.clicked.connect(lambda : self.logVerify((logUsr.text(), logPas.text())))
        bckBtn.clicked.connect(lambda : self.switchPage(0))
        self.loginPage.setLayout(loginPageLayout)
        self.stackLayout.addWidget(self.loginPage)

    def create_page(self):
        self.createPage = QWidget()
        createPageLayout = QVBoxLayout()
        title = QLabel("Create Account")
        title.setFixedSize(200, 60)
        title.setAlignment(Qt.AlignCenter)
        createPageLayout.addWidget(title)
        createPageLayout.setSpacing(20)
        form = QVBoxLayout()
        form.setAlignment(Qt.AlignCenter)
        usrForm = QHBoxLayout()
        usrLab = QLabel("Username:")
        usrLog = QLineEdit()
        usrForm.addWidget(usrLab)
        usrForm.addWidget(usrLog)
        usrLab.setFixedSize(100, 30)
        usrLog.setFixedSize(200, 30)
        pasForm = QHBoxLayout()
        pasLab = QLabel("Password:")
        pasLog = QLineEdit()
        pasLog.setEchoMode(QLineEdit.Password)
        pasForm.addWidget(pasLab)
        pasForm.addWidget(pasLog)
        pasLab.setFixedSize(100, 30)
        pasLog.setFixedSize(200, 30)
        cpasForm = QHBoxLayout()
        labcPas = QLabel("Confirm Password:")
        logcPas = QLineEdit()
        logcPas.setEchoMode(QLineEdit.Password)
        cpasForm.addWidget(labcPas)
        cpasForm.addWidget(logcPas)
        labcPas.setFixedSize(100, 30)
        logcPas.setFixedSize(200, 30)
        form.addLayout(usrForm)
        form.addLayout(pasForm)
        form.addLayout(cpasForm)
        btns = QHBoxLayout()
        btns.setSpacing(20)
        btns.addStretch(1)
        bckBtn = QPushButton("Back")
        crtBtn = QPushButton("Create Account")
        crtBtn.setFixedSize(100, 50)
        bckBtn.setFixedSize(100, 50)
        btns.addWidget(bckBtn)
        btns.addWidget(crtBtn)
        createPageLayout.addLayout(form)
        createPageLayout.addLayout(btns)
        crtBtn.clicked.connect(lambda : self.crtAcc((usrLog.text(), pasLog.text(), logcPas.text())))
        bckBtn.clicked.connect(lambda : self.switchPage(0))
        self.createPage.setLayout(createPageLayout)
        self.stackLayout.addWidget(self.createPage)
        
    def details_page(self):
        self.detailsPage = QWidget()
        detailsPageLayout = QVBoxLayout()
        title = QLabel("Enter Flipkart details")
        title.setFixedSize(200, 60)
        title.setAlignment(Qt.AlignCenter)
        detailsPageLayout.addWidget(title)
        detailsPageLayout.setSpacing(20)
        form = QVBoxLayout()
        form.setAlignment(Qt.AlignCenter)
        usrForm = QHBoxLayout()
        labUsr = QLabel("Email ID/Mobile No.:")
        flUsr = QLineEdit()
        usrForm.addWidget(labUsr)
        usrForm.addWidget(flUsr)
        labUsr.setFixedSize(100, 30)
        flUsr.setFixedSize(200, 30)
        pasForm = QHBoxLayout()
        labPas = QLabel("Password:")
        flPas = QLineEdit()
        flPas.setEchoMode(QLineEdit.Password)
        pasForm.addWidget(labPas)
        pasForm.addWidget(flPas)
        labPas.setFixedSize(100, 30)
        flPas.setFixedSize(200, 30)
        upidForm = QHBoxLayout()
        upidLab = QLabel("UPI ID:")
        upidLog = QLineEdit()
        upidForm.addWidget(upidLab)
        upidForm.addWidget(upidLog)
        upidLab.setFixedSize(100, 30)
        upidLog.setFixedSize(200, 30)
        cardForm = QHBoxLayout()
        cardLab = QLabel("Credit/Debit Card No.:")
        cardLog = QLineEdit()
        cardForm.addWidget(cardLab)
        cardForm.addWidget(cardLog)
        cardLab.setFixedSize(100, 30)
        cardLog.setFixedSize(200, 30)
        form.addLayout(usrForm)
        form.addLayout(pasForm)
        form.addLayout(upidForm)
        form.addLayout(cardForm)
        btns = QHBoxLayout()
        btns.addStretch(1)
        bckBtn = QPushButton("Back")
        flBtn = QPushButton("Confirm")
        btns.addWidget(bckBtn)
        btns.addWidget(flBtn)
        detailsPageLayout.addLayout(form)
        detailsPageLayout.addLayout(btns)
        bckBtn.setFixedSize(100, 50)
        flBtn.setFixedSize(100, 50)
        bckBtn.clicked.connect(lambda : self.switchPage(3))
        flBtn.clicked.connect(lambda : self.details(( flUsr.text(), flPas.text(), upidLog.text(), cardLog.text())))
        self.detailsPage.setLayout(detailsPageLayout)
        self.stackLayout.addWidget(self.detailsPage)

    def dash_page(self):
        self.dashPage = QWidget()
        dashPageLayout = QVBoxLayout()
        btns = QHBoxLayout()
        removeBtn = QPushButton("Delete")
        addBtn = QPushButton("Add")
        btns.addWidget(removeBtn)
        btns.addWidget(addBtn)
        removeBtn.setFixedSize(50, 50)
        addBtn.setFixedSize(50, 50)
        dashPageLayout.addLayout(btns)
        self.links = input.getLinks()
        table = QTableWidget()
        table.setColumnCount(4)
        table.setRowCount(len(self.links)+1)
        table.setItem(0, 0, QTableWidgetItem("Select"))
        table.setItem(0, 1, QTableWidgetItem("Product"))
        table.setItem(0, 2, QTableWidgetItem("Price"))
        table.setItem(0, 3, QTableWidgetItem("Rating"))
        table.setColumnWidth(1, 300)
        self.checkList = []
        for i, j in zip(range(1, len(self.links)+1), self.links):
            cBox = QCheckBox(self)
            self.checkList.append(cBox)
            table.setCellWidget(i, 0, cBox)
            table.setCellWidget(i, 1, QLabel("<p><a href='{}'>{}</a></p>".format(j, stub.get_title(self.links[i-1]))))
            table.setCellWidget(i, 2, QLabel("<p>{}</p>".format(stub.get_cost(j))))
            table.setCellWidget(i, 3, QLabel("<p>{}</p>".format(stub.get_star(j))))
        dashPageLayout.addWidget(table)
        btns = QHBoxLayout()
        btns.addStretch(1)
        bckBtn = QPushButton("Back")
        orBtn = QPushButton("Order")
        btns.addWidget(bckBtn)
        btns.addWidget(orBtn)
        bckBtn.setFixedSize(100, 50)
        orBtn.setFixedSize(100, 50)
        dashPageLayout.addLayout(btns)
        addBtn.clicked.connect(self.addLinks)
        removeBtn.clicked.connect(self.delLinks)
        bckBtn.clicked.connect(lambda : self.switchPage(1))
        orBtn.clicked.connect(self.order)
        self.dashPage.setLayout(dashPageLayout)
        self.stackLayout.addWidget(self.dashPage)

    def order_page(self):
        self.orderPage = QWidget()
        orderPageLayout = QVBoxLayout()
        title = QLabel("Verify your details before ordering...")
        title.setFixedSize(200, 60)
        title.setAlignment(Qt.AlignCenter)
        orderPageLayout.addWidget(title)
        orderPageLayout.setSpacing(20)
        form = QVBoxLayout()
        form.setAlignment(Qt.AlignCenter)
        detals = input.getDetals()
        usrForm = QHBoxLayout()
        labUsr = QLabel("Email ID/Mobile No.:")
        flUsr = QLineEdit()
        if ( detals ): flUsr.setText(detals[0])
        usrForm.addWidget(labUsr)
        usrForm.addWidget(flUsr)
        labUsr.setFixedSize(100, 30)
        flUsr.setFixedSize(200, 30)
        pasForm = QHBoxLayout()
        labPas = QLabel("Password:")
        flPas = QLineEdit()
        if ( detals ): flPas.setText(detals[1])
        pasForm.addWidget(labPas)
        pasForm.addWidget(flPas)
        labPas.setFixedSize(100, 30)
        flPas.setFixedSize(200, 30)
        upidForm = QHBoxLayout()
        upidLab = QLabel("UPI ID:")
        upidLog = QLineEdit()
        if ( detals ): upidLog.setText(detals[2])
        upidForm.addWidget(upidLab)
        upidForm.addWidget(upidLog)
        upidLab.setFixedSize(100, 30)
        upidLog.setFixedSize(200, 30)
        cardForm = QHBoxLayout()
        cardLab = QLabel("Credit/Debit Card No.:")
        cardLog = QLineEdit()
        if ( detals ): cardLog.setText(detals[3])
        cardForm.addWidget(cardLab)
        cardForm.addWidget(cardLog)
        cardLab.setFixedSize(100, 30)
        cardLog.setFixedSize(200, 30)
        form.addLayout(usrForm)
        form.addLayout(pasForm)
        form.addLayout(upidForm)
        form.addLayout(cardForm)
        radt = QVBoxLayout()
        radt.setAlignment(Qt.AlignCenter)
        upi = QRadioButton("UPI")
        upi.setChecked(True)
        card = QRadioButton("Credit/Debit Card")
        dt = QDateTimeEdit()
        current_time = QDateTime.currentDateTime()
        dt.setDateTime(current_time)
        dt.setDateTimeRange(current_time, QDateTime(2100, 1, 1, 00, 00, 00))
        dt.setFixedSize(200, 20)
        radt.addWidget(upi)
        radt.addWidget(card)
        radt.addWidget(dt)
        btns = QHBoxLayout()
        btns.addStretch(1)
        bckBtn = QPushButton("Back")
        flBtn = QPushButton("Confirm")
        btns.addWidget(bckBtn)
        btns.addWidget(flBtn)
        orderPageLayout.addLayout(form)
        orderPageLayout.addLayout(radt)
        orderPageLayout.addLayout(btns)
        bckBtn.setFixedSize(100, 50)
        flBtn.setFixedSize(100, 50)
        bckBtn.clicked.connect(lambda : self.switchPage(5))
        flBtn.clicked.connect(lambda : self.orderNow(( flUsr.text(), flPas.text(), upidLog.text(), cardLog.text(), ( 1 if upi.isChecked() else 0 ), str(dt.dateTime().toPyDateTime()))))
        self.orderPage.setLayout(orderPageLayout)
        self.stackLayout.addWidget(self.orderPage)

    def dialog(self):
        warnMsg = QMessageBox()
        warnMsg.setWindowTitle("Warning")
        warnMsg.setText("""Before ordering a product you must ensure that you have registered your email id, mobile number and a single address in your respective Flipkart account""")
        warnMsg.setStandardButtons(QMessageBox.Ok)
        warnMsg.buttonClicked.connect(lambda : self.switchPage(3))
        warnMsg.exec_()

    def crtAcc(self, x):
        if ( ( x[0] and x[1] ) and ( x[1] == x[2]) ):
            input.create(x[::2])
            self.dialog()
        else:
            errCrt = QMessageBox()
            errCrt.setText("Invalid Credentials")
            errCrt.exec_()            

    def details(self, x):
        if ( x[0] and x[1] and ( x[2] or x[3] ) ):
            input.createDetails(list(x))
            self.switchPage(1)

    def logVerify(self, p):
        if ( input.verify(list(p)) == True ):
            self.switchPage(5)
        else:
            errLog = QMessageBox()
            errLog.setText("Incorrect Credentials")
            errLog.exec_()            

    def addLinks(self):
        txt, ok = QInputDialog().getText(self, "Add Product", "Enter the URL:")
        if ok:
            input.addLink(txt)
            self.refreshDash()
             
    def delLinks(self):
        for i in range(len(self.checkList)):
            if ( self.checkList[i].checkState() == 2 ):
                input.delLink(i+2)
        self.refreshDash()

    def refreshDash(self):
        self.links = input.getLinks()
        self.stackLayout.removeWidget(self.dashPage)
        self.dash_page()
        self.switchPage(5)

    def order(self):
        errLog = QMessageBox()
        errLog.setText("Select and Order One product at a time")
        errLog.exec_()            
        for i in range(len(self.checkList)):
            if ( self.checkList[i].checkState() == 2 ):
                self.ordNow = input.getLink(i+2)
                print(self.ordNow)
                self.switchPage(4)
                break
        
    def orderNow(self, x):
        warnMsg = QMessageBox.question(self, "Confirmation", """Do you want to confirm?
                   If the product is out of stock it will be ordered automatically when it gets restocked""", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if warnMsg == QMessageBox.Yes:
            print("Ordered")
            print(x + (self.ordNow,))
            input.order((x + (self.ordNow,)))
            self.switchPage(5)

    def switchPage(self, i):
        self.stackLayout.setCurrentIndex(i)


def main():
    app = QApplication([])
    app.setStyleSheet(stub.styleSheet)
    gui = Window()
    gui.show()
    sys.exit(app.exec_())    


if __name__ == '__main__':
    main()